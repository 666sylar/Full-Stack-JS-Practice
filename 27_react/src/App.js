import ToDo from './component/ToDo';

/*
Раніше ми вже робили Todo.
Зараз ми просто розширимо стек технологій, які використовуються для розробки цього проекту.
Ви можете за основу взяти проект розроблений у 25 завданні, а можете розробити проект повністю з нуля.

Реалізувати Todo App із глобальним Redux станом.
(Орієнтовний інтерфейс за посиланням знизу).
Користувач може:
- створювати завдання (value, isDone, *deadline),
- *відзначати їх як виконані (чекбоксом або закреслювати)
- видаляти.
*Прострочені завдання підсвічувати червоним кольором.


Стек технологій:
- React
- Formik
- yup
- classnames
- SASS (SCSS)
- Redux Toolkit


Вимоги до роботи:
- Валідація введення користувача (наприклад, не порожнє поле введення)
- Для поля введення передбачити повідомлення про помилку
- *Стилі повинні реагувати на стан валідації
- *Буде плюсом закріпити роботу з Thunk: наприклад, додати хедер, в якому відображати дані про погоду з https://open-meteo.com/ або завантажувати дані з  https://randomuser.me/ і виводити фото і ім'я користувача або якусь інформацію з іншого вільного апі. Завантажені дані зберігати в глобальному стані. Приклад з заняття: https://github.com/pecourses/pe2023-1-contacts-app/commit/6968a03d911d28b2681953623dfaa7fff95b85b8.

Базовий кістяк без Redux у репозиторії за посиланням.

Приклад аналогічної логіки в проєкті на занятті (https://github.com/pecourses/pe2023-1-contacts-app/tree/1daa4419432520df2eaa3a23bd5491182bad7c3f).
*/

const App = () => {
  return <ToDo />;
};

export default App;
